# -*- coding: utf-8 -*-
"""
ADVANCED Telegram Broadcast Bot (‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω Comments)
- python-telegram-bot v20+ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´‡∂∫‡∑ô‡∂±‡∑ä‡∂∏ ‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω‡∑ì‡∂± ‡∂ö‡∂ª ‡∂á‡∂≠
- ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∂ö‡∑ö‡∂≠‡∂∫ ‡∂ë‡∂ö‡∂∏ ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä‡∂ö.

--- ADVANCED FEATURES (‡∂Ø‡∑í‡∂∫‡∑î‡∂´‡∑î ‡∑Ä‡∑í‡∑Å‡∑ö‡∑Ç‡∑è‡∂Ç‡∂ú) ---
1.  Multi-Line Buttons (‡∂∂‡∑Ñ‡∑î-‡∂¥‡∑ö‡∑Ö‡∑í ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä):
    - ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∂ß ‡∂¥‡∑É‡∑î‡∑Ä, ‡∂±‡∑Ä ‡∂¥‡∑ö‡∑Ö‡∑í ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∑É‡∑Ñ URL ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö.
    - ‡∂ã‡∂Ø‡∑è‡∑Ñ‡∂ª‡∂´‡∂∫:
      /send
      Button 1 | https://link1.com
      Button 2 | https://link2.com

2.  Smart Send (‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ Forward/Copy):
    - /send (‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∂±‡∑ê‡∂≠‡∑î‡∑Ä) -> ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ FORWARD ‡∂ö‡∂ª‡∂∫‡∑í.
    - /send (‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∑É‡∂∏‡∂ú) -> ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ COPY ‡∂ö‡∂ª ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∑É‡∂∏‡∂ú ‡∂∫‡∑Ä‡∂∫‡∑í.

3.  Scheduled Broadcasts (/schedule):
    - ‡∂¥‡∑É‡∑î‡∑Ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂© schedule ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö.
    - ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫: /schedule [‡∂ö‡∑è‡∂Ω‡∂∫]
    - [‡∂ö‡∑è‡∂Ω‡∂∫] = 10m (‡∂∏‡∑í‡∂±‡∑í‡∂≠‡∑ä‡∂≠‡∑î 10), 2h (‡∂¥‡∑ê‡∂∫ 2), 1d (‡∂Ø‡∑í‡∂± 1).
    - ‡∂ã‡∂Ø‡∑è‡∑Ñ‡∂ª‡∂´‡∂∫:
      /schedule 2h
      Button 1 | https://link1.com

4.  Broadcast Confirmation (‡∑Ä‡∑í‡∂ö‡∑è‡∑Å‡∂±‡∂∫ ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏):
    - ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑ì‡∂∏‡∂ö‡∑í‡∂±‡∑ä broadcast ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏ ‡∑Ä‡∑ê‡∑Ö‡∑ê‡∂ö‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß, Admin ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä 'YES' ‡∂Ω‡∑ô‡∑É ‡∂ß‡∂∫‡∑í‡∂¥‡∑ä ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î‡∂∫.

5.  Broadcast Throttling (‡∑Ä‡∑í‡∂ö‡∑è‡∑Å‡∂± ‡∑Ä‡∑ö‡∂ú‡∂∫ ‡∂¥‡∑è‡∂Ω‡∂±‡∂∫):
    - Telegram ‡∑Ñ‡∑í ‡∑É‡∑ì‡∂∏‡∑è‡∑Ä‡∂±‡∑ä‡∂ß (rate-limits) ‡∑Ñ‡∑É‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∏‡∂ß, ‡∂≠‡∂≠‡∑ä‡∂¥‡∂ª‡∂∫‡∂ö‡∂ß ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂© 25‡∂ö
      ‡∂Ü‡∂ª‡∂ö‡∑ä‡∑Ç‡∑í‡∂≠ ‡∑Ä‡∑ö‡∂ú‡∂∫‡∂ö‡∑í‡∂±‡∑ä ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂© ‡∂∫‡∑Ä‡∂∫‡∑í. (‡∑Ä‡∑í‡∑Å‡∑è‡∂Ω user base ‡∂ë‡∂ö‡∂ö‡∂ß ‡∂Ö‡∂≠‡∑ä‚Äç‡∂∫‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫‡∂∫‡∑í).

6.  Updated /vip Menu & Startup Notification (‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω‡∑ì‡∂± ‡∑Ä‡∑ñ ‡∂∏‡∑ô‡∂±‡∑î‡∑Ä).
"""

import logging
import firebase_admin
import asyncio
import re
from firebase_admin import credentials, firestore
from datetime import datetime, timedelta
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.error import BadRequest, Forbidden
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# --- START OF CONFIGURATION (‡∑É‡∑ê‡∂ö‡∑É‡∑î‡∂∏‡∑ä) ---
TELEGRAM_BOT_TOKEN = "8419617505:AAFwnP-m7fbhbcUYFKm85xQmz0FLsyupZbE"
ADMIN_USER_ID = 6687619682
TARGET_GROUP_ID = -1003074965096
# --- END OF CONFIGURATION ---

# --- ADVANCED CONFIG (‡∂ã‡∑É‡∑É‡∑ä ‡∑É‡∑ê‡∂ö‡∑É‡∑î‡∂∏‡∑ä) ---
# ‡∂≠‡∂≠‡∑ä‡∂¥‡∂ª‡∂∫‡∂ö‡∂ß ‡∂∫‡∑Ä‡∂± ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂© ‡∂ú‡∂´‡∂±. 25 ‡∂∫‡∂±‡∑î ‡∂Ü‡∂ª‡∂ö‡∑ä‡∑Ç‡∑í‡∂≠ ‡∑É‡∑ì‡∂∏‡∑è‡∑Ä‡∂ö‡∑í (Telegram ‡∑É‡∑ì‡∂∏‡∑è‡∑Ä ~30/sec)
BROADCAST_RATE_LIMIT = 25 

# ‡∂Ω‡∑ú‡∂ú‡∑ä ‡∑É‡∑ê‡∂ö‡∑É‡∑ì‡∂∏ (Logging)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# Firebase ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ (Initialize Firebase)
try:
    cred = credentials.Certificate("serviceAccountKey.json")
    firebase_admin.initialize_app(cred)
    db = firestore.client()
    logger.info("Firebase ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑í‡∂∫!")
except Exception as e:
    logger.error(f"Firebase ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")
    # Bot ‡∂ë‡∂ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è ‡∑Ä‡∑í‡∂ª‡∑Ñ‡∑í‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏, Firebase ‡∂±‡∑ê‡∂≠‡∑î‡∑Ä ‡∑Ä‡∑ê‡∂©‡∂ö‡∑ä ‡∂±‡∑ê‡∂≠‡∑í ‡∂±‡∑í‡∑É‡∑è
    exit()

# --- HELPER FUNCTIONS (‡∂ã‡∂¥‡∂ö‡∑è‡∂ª‡∂ö ‡∑Å‡∑ä‚Äç‡∂ª‡∑í‡∂≠) ---

async def check_group_membership(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> dict:
    """‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è group ‡∂ë‡∂ö‡∑ö ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑ô‡∂ö‡∑ä‡∂Ø‡∑ê‡∂∫‡∑í ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂∫‡∑í."""
    try:
        member = await context.bot.get_chat_member(chat_id=TARGET_GROUP_ID, user_id=user_id)
        if member.status in ['member', 'administrator', 'creator', 'restricted']:
            return {"is_member": True, "status": member.status}
        else:
            # 'left' or 'kicked'
            return {"is_member": False, "status": member.status}
    except (BadRequest, Forbidden) as e:
        logger.error(f"‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂≠‡∑ä‡∑Ä‡∂∫ ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä (ID: {user_id}): {e}")
        # Bot ‡∂ß admin ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä ‡∂∏‡∑ô‡∂≠‡∂±‡∂ß ‡∂ë‡∂±‡∑Ä‡∑è
        return {"is_member": False, "status": "error", "error_message": str(e)}
    except Exception as e:
        logger.error(f"‡∑É‡∑è‡∂∏‡∑è‡∂±‡∑ä‚Äç‡∂∫ ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä (‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂≠‡∑ä‡∑Ä‡∂∫ ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏): {e}")
        return {"is_member": False, "status": "error", "error_message": str(e)}

async def notify_admin_on_startup(app: Application) -> None:
    """Bot ‡∂ë‡∂ö ‡∂î‡∂±‡∑ä ‡∑Ä‡∑ñ ‡∑Ä‡∑í‡∂ß Admin ‡∂ß DM ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∫‡∑Ä‡∂∫‡∑í."""
    try:
        await app.bot.send_message(
            chat_id=ADMIN_USER_ID,
            text=f"ü§ñ *Bot is now ONLINE! (Advanced v1.0)*\n\n"
                 f"Throttling: *{BROADCAST_RATE_LIMIT} msg/sec*\n"
                 f"Features: Multi-Button, Schedule, Confirm\n"
                 f"Use /vip to see your admin commands.",
            parse_mode=ParseMode.MARKDOWN
        )
        logger.info("Admin ‡∑Ñ‡∂ß startup ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∂∫‡∑Ä‡∂± ‡∂Ω‡∂Ø‡∑ì.")
    except Exception as e:
        logger.error(f"Admin ‡∑Ñ‡∂ß startup ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫: {e}")

def parse_buttons(message_text: str) -> (InlineKeyboardMarkup | None):
    """
    ‡∂î‡∂∂ ‡∂â‡∂Ω‡∑ä‡∂Ω‡∑ñ ‡∂∂‡∑Ñ‡∑î-‡∂¥‡∑ö‡∑Ö‡∑í ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä (multi-line buttons) ‡∑É‡∂ö‡∑É‡∂± ‡∑Å‡∑ä‚Äç‡∂ª‡∑í‡∂≠‡∂∫ ‡∂∏‡∑ô‡∂∫‡∂∫‡∑í.
    Format:
    Button Text | https://link.com
    Button Text 2 | https://link2.com
    """
    lines = message_text.split('\n')[1:] # ‡∂¥‡∑Ö‡∂∏‡∑î ‡∂¥‡∑ö‡∑Ö‡∑í‡∂∫ (command ‡∂ë‡∂ö) ‡∂∏‡∂ü ‡∑Ñ‡∑ê‡∂ª‡∑ì‡∂∏
    buttons = []
    if not lines:
        return None # ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∂±‡∑ê‡∂≠

    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        try:
            # '|' ‡∂Ω‡∂ö‡∑î‡∂´‡∑ô‡∂±‡∑ä text ‡∂ë‡∂ö ‡∑É‡∑Ñ URL ‡∂ë‡∂ö ‡∑Ä‡∑ô‡∂±‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
            button_text, button_url = line.split('|', 1)
            button_text = button_text.strip()
            button_url = button_url.strip()
            
            # URL ‡∂ë‡∂ö http:// ‡∑Ñ‡∑ù https:// ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä ‡∂¥‡∂ß‡∂±‡∑ä ‡∂ú‡∂±‡∑ä‡∂±‡∑ö‡∂Ø‡∑ê‡∂∫‡∑í ‡∂∂‡∑ê‡∂Ω‡∑ì‡∂∏
            if not (button_url.startswith("http://") or button_url.startswith("https://")):
                logger.warning(f"‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ú‡∑Ä‡∂± URL ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∏‡∂ü ‡∑Ñ‡∂ª‡∑í‡∂± ‡∂Ω‡∂Ø‡∑ì: {button_url}")
                continue
                
            buttons.append([InlineKeyboardButton(text=button_text, url=button_url)])
        
        except ValueError:
            logger.warning(f"‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ú‡∑Ä‡∂± ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∂Ü‡∂ö‡∑ò‡∂≠‡∑í‡∂∫‡∂ö‡∑ä ‡∂∏‡∂ü ‡∑Ñ‡∂ª‡∑í‡∂± ‡∂Ω‡∂Ø‡∑ì: {line}")
            continue
    
    if buttons:
        return InlineKeyboardMarkup(buttons)
    return None

def parse_time(time_str: str) -> (int | None):
    """Schedule command ‡∂ë‡∂ö‡∑ö ‡∂ö‡∑è‡∂Ω‡∂∫ ‡∂≠‡∂≠‡∑ä‡∂¥‡∂ª ‡∑Ä‡∂Ω‡∂ß ‡∑Ñ‡∂ª‡∑Ä‡∂∫‡∑í (10m, 2h, 1d)."""
    if not time_str:
        return None
        
    match = re.match(r"^(\d+)([mhd])$", time_str.lower())
    if not match:
        return None
        
    value = int(match.group(1))
    unit = match.group(2)
    
    if unit == 'm':
        return value * 60 # ‡∂∏‡∑í‡∂±‡∑í‡∂≠‡∑ä‡∂≠‡∑î
    elif unit == 'h':
        return value * 3600 # ‡∂¥‡∑ê‡∂∫
    elif unit == 'd':
        return value * 86400 # ‡∂Ø‡∑Ä‡∑É‡∑ä
    return None

def get_subscriber_ids() -> list:
    """Database ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ subscriber IDs ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏."""
    try:
        users_ref = db.collection('subscribers').stream()
        return [user.id for user in users_ref]
    except Exception as e:
        logger.error(f"Firestore ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä subscriber IDs ‡∂Ω‡∂∂‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫: {e}")
        return []


async def do_broadcast(context: ContextTypes.DEFAULT_TYPE, job_data: dict) -> None:
    """
    Broadcast ‡∂ë‡∂ö ‡∑É‡∑í‡∂Ø‡∑î‡∂ö‡∂ª‡∂± ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∑Å‡∑ä‚Äç‡∂ª‡∑í‡∂≠‡∂∫ (Throttling ‡∑É‡∂∏‡∂ú).
    'handle_confirmation' ‡∑Ñ‡∑ù 'scheduled_broadcast_job' ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∂∏‡∑ô‡∂∫ call ‡∂ö‡∂ª‡∂∫‡∑í.
    """
    
    # job ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
    admin_id = job_data["admin_id"]
    from_chat_id = job_data["from_chat_id"]
    message_id = job_data["message_id"]
    buttons = job_data["buttons"] # InlineKeyboardMarkup object ‡∂ë‡∂ö ‡∑Ñ‡∑ù None
    operation = "copy" if buttons else "forward" # Smart Send
    
    subscriber_ids = get_subscriber_ids()
    if not subscriber_ids:
        await context.bot.send_message(admin_id, "Database ‡∂ë‡∂ö ‡∑Ñ‡∑í‡∑É‡∑ä‡∂∫. Broadcast ‡∂ë‡∂ö ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì.")
        return

    total_users = len(subscriber_ids)
    success_count = 0
    failure_count = 0
    
    # Admin ‡∂ß broadcast ‡∂ë‡∂ö ‡∂¥‡∂ß‡∂±‡∑ä ‡∂ú‡∂≠‡∑ä ‡∂∂‡∑Ä ‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä ‡∂Ø‡∑ì‡∂∏
    await context.bot.send_message(
        admin_id,
        f"üöÄ *Broadcast ‡∂ë‡∂ö ‡∂á‡∂ª‡∂π‡∑î‡∂´‡∑è...*\n\n"
        f"‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∑Ä: *{operation.upper()}*\n"
        f"‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑í‡∂±‡∑ä *{total_users}* ‡∂Ø‡∑ô‡∂±‡∑ô‡∂ö‡∑î‡∂ß ‡∂∫‡∑Ä‡∂∏‡∑í‡∂±‡∑ä ‡∑É‡∑í‡∂ß‡∑ì (‡∑Ä‡∑ö‡∂ú‡∂∫: {BROADCAST_RATE_LIMIT} msg/sec).\n\n"
        f"‡∂∏‡∑ô‡∂∫ ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä ‡∑Ä‡∑ñ ‡∂¥‡∑É‡∑î ‡∂î‡∂∂‡∂ß ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä ‡∑Ä‡∑è‡∂ª‡∑ä‡∂≠‡∑è‡∑Ä‡∂ö‡∑ä ‡∂Ω‡∑ê‡∂∂‡∑ô‡∂±‡∑î ‡∂á‡∂≠.",
        parse_mode=ParseMode.MARKDOWN
    )
    
    # Throttled Loop - ‡∑Ä‡∑ö‡∂ú‡∂∫ ‡∂¥‡∑è‡∂Ω‡∂±‡∂∫ ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
    for user_id_str in subscriber_ids:
        try:
            user_id_int = int(user_id_str)
            
            if operation == "copy":
                await context.bot.copy_message(
                    chat_id=user_id_int,
                    from_chat_id=from_chat_id,
                    message_id=message_id,
                    reply_markup=buttons
                )
            else: # operation == "forward"
                await context.bot.forward_message(
                    chat_id=user_id_int,
                    from_chat_id=from_chat_id,
                    message_id=message_id
                )
            success_count += 1
            
        except (Forbidden, BadRequest) as e:
            failure_count += 1
            logger.error(f"{user_id_str} ‡∑Ä‡∑ô‡∂≠ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫: {e}")
            if "bot was blocked by the user" in str(e).lower() or "user is deactivated" in str(e).lower():
                logger.info(f"User {user_id_str} ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä bot ‡∑Ä block ‡∂ö‡∂ª ‡∂á‡∂≠. Database ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä...")
                try:
                    # Bot ‡∑Ä block ‡∂ö‡∑Ö ‡∂Ö‡∂∫‡∑Ä DB ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
                    db.collection('subscribers').document(user_id_str).delete()
                except Exception as del_e:
                    logger.error(f"User {user_id_str} ‡∑Ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫: {del_e}")
        except Exception as e:
            failure_count += 1
            logger.error(f"{user_id_str} ‡∑Ä‡∑ô‡∂≠ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂±‡∑ú‡∂Ø‡∂±‡∑ä‡∂±‡∑è ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")

        # Throttling - ‡∑Ä‡∑ö‡∂ú‡∂∫ ‡∂¥‡∑è‡∂Ω‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
        # Telegram rate limit (30/sec) ‡∂ë‡∂ö‡∂ß ‡∂Ö‡∑É‡∑î‡∂±‡∑ú‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂∏‡∑ô‡∑É‡∑ö ‡∂ö‡∂ª‡∂∫‡∑í
        await asyncio.sleep(1 / BROADCAST_RATE_LIMIT)

    # Admin ‡∂ß ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä ‡∑Ä‡∑è‡∂ª‡∑ä‡∂≠‡∑è‡∑Ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
    await context.bot.send_message(
        admin_id,
        f"‚úÖ *Broadcast ‡∂ë‡∂ö ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä!*\n\n"
        f"‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂∫‡∑ê‡∑Ä‡∑ñ ‡∂ú‡∂´‡∂±: *{success_count}*\n"
        f"‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö ‡∑Ä‡∑ñ ‡∂ú‡∂´‡∂±: *{failure_count}*\n"
        f"(Block ‡∂ö‡∑Ö/Deactivated ‡∑Ä‡∑ñ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑í‡∂±‡∑ä ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∑Ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì)",
        parse_mode=ParseMode.MARKDOWN
    )

# --- BOT HANDLER FUNCTIONS (‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö ‡∑Ä‡∑í‡∂∞‡∑è‡∂±) ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/start ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∑É‡∑Ñ group ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂≠‡∑ä‡∑Ä‡∂∫ ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏."""
    user = update.effective_user
    chat = update.effective_chat
    
    # Group chat ‡∂ë‡∂ö‡∂ö /start ‡∂ú‡∑ê‡∑Ñ‡∑î‡∑Ä‡∑ú‡∂≠‡∑ä
    if chat.type != 'private':
        if str(chat.id) == str(TARGET_GROUP_ID):
            try:
                await update.message.reply_text(
                    f"üëã @{user.username or user.first_name}, ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∂ß /start ‡∂∫‡∂±‡∑ä‡∂± ‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∑í‡∂ö‡∑Ä (DM) ‡∂ë‡∑Ä‡∂±‡∑ä‡∂±!",
                    reply_to_message_id=update.message.message_id
                )
            except Exception: pass
        return

    logger.info(f"User {user.id} ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä /start ‡∂Ω‡∑ê‡∂∂‡∑î‡∂´‡∑í (DM)")
    
    # Group ‡∂ë‡∂ö‡∑ö ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑ô‡∂ö‡∑ä‡∂Ø‡∑ê‡∂∫‡∑í ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    membership = await check_group_membership(context, user.id)

    if not membership["is_member"]:
        logger.info(f"User {user.id} group ‡∂ë‡∂ö‡∑ö ‡∂±‡∑ê‡∂≠ (Status: {membership['status']}). ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í‡∂∫ ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂ö‡∑ä‡∑Ç‡∑ö‡∂¥ ‡∑Ä‡∑í‡∂∫.")
        reply_text = (
            "‚õî *‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í‡∂∫ ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í*\n\n"
            "Broadcast ‡∑É‡∑ö‡∑Ä‡∑è‡∑Ä ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß, ‡∂î‡∂∂ ‡∂Ö‡∂¥‡∂ú‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± group ‡∂ë‡∂ö‡∑ö ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫.\n\n"
            "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª group ‡∂ë‡∂ö‡∂ß join ‡∑Ä‡∑ì, ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂∏‡∑ô‡∑Ñ‡∑í /start ‡∂Ω‡∑ô‡∑É ‡∂ß‡∂∫‡∑í‡∂¥‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±."
        )
        
        if membership["status"] == "error":
            # Bot ‡∂ß admin ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä, Admin ‡∂ß ‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä ‡∂Ø‡∑ì‡∂∏
            reply_text = "‚ö†Ô∏è ‡∂î‡∂∂‡∂ú‡∑ö ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂≠‡∑ä‡∑Ä‡∂∫ ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑í‡∂∫. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±."
            await context.bot.send_message(
                chat_id=ADMIN_USER_ID,
                text=f"üÜò *CRITICAL BOT ERROR*\n\n"
                     f"User `{user.id}` ‡∂ú‡∑ö ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂≠‡∑ä‡∑Ä‡∂∫ (group: `{TARGET_GROUP_ID}`) ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑Ö ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.\n\n"
                     f"*‡∂Ø‡∑ù‡∑Ç‡∂∫:* `{membership.get('error_message')}`\n\n"
                     "üëâ **‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂∏‡∑è‡∂ª‡∑ä‡∂ú‡∂∫: Bot ‡∑Ä ‡∂Ö‡∂±‡∑í‡∑Ä‡∑è‡∂ª‡∑ä‡∂∫‡∂∫‡∑ô‡∂±‡∑ä‡∂∏ group ‡∂ë‡∂ö‡∑ö ADMINISTRATOR ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±!**",
                parse_mode=ParseMode.MARKDOWN
            )
            
        await update.message.reply_text(reply_text, parse_mode=ParseMode.MARKDOWN)
        return

    # --- ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑ô‡∂ö‡∑ä ‡∂±‡∂∏‡∑ä, DB ‡∂ë‡∂ö‡∂ß ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ---
    try:
        logger.info(f"User {user.id} group ‡∂ë‡∂ö‡∑ö ‡∑É‡∑í‡∂ß‡∑ì. (Status: {membership['status']}).")
        
        user_doc_ref = db.collection('subscribers').document(str(user.id))
        user_doc = user_doc_ref.get()

        if not user_doc.exists:
            # User ‡∑Ä DB ‡∂ë‡∂ö‡∂ß ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ô‡∂±‡∑ä ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
            user_data = {
                'user_id': user.id,
                'first_name': user.first_name,
                'last_name': user.last_name or '',
                'username': user.username or '',
                'subscribed_at': firestore.SERVER_TIMESTAMP
            }
            user_doc_ref.set(user_data)
            logger.info(f"‡∂±‡∑Ä ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑ä ({user.id}) Firestore ‡∑Ä‡∑ô‡∂≠ ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì.")
            
            await context.bot.send_message(
                chat_id=user.id,
                text="‚úÖ *‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∑Ä‡∑í‡∂∫!*\n\n"
                     "‡∂î‡∂∂‡∑Ä ‡∂Ö‡∂¥‡∂ú‡∑ö broadcast ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä‡∂ß ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∂ª‡∂ú‡∂±‡∑ä‡∂±‡∑è ‡∂Ω‡∂Ø‡∑ì. "
                     "‡∑Ä‡∑ê‡∂Ø‡∂ú‡∂≠‡∑ä ‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω‡∑ì‡∂± ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂î‡∂∂‡∂ß ‡∂ö‡∑ô‡∂Ω‡∑í‡∂±‡∑ä‡∂∏ ‡∂Ω‡∑ê‡∂∂‡∑ô‡∂±‡∑î ‡∂á‡∂≠.",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            # User ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä DB ‡∂ë‡∂ö‡∑ö ‡∑É‡∑í‡∂ß‡∑ì ‡∂±‡∂∏‡∑ä
            logger.info(f"User {user.id} ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∑Ä‡∑ì ‡∂á‡∂≠.")
            await context.bot.send_message(
                chat_id=user.id,
                text="‚ÑπÔ∏è ‡∂î‡∂∂ ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂Ö‡∂¥‡∂ú‡∑ö broadcast ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä‡∑ö ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∑Ä‡∑ì ‡∂á‡∂≠."
            )

    except Exception as e:
        logger.error(f"/start ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä (User {user.id}): {e}")
        await update.message.reply_text("‚ö†Ô∏è ‡∂¥‡∂Ø‡∑ä‡∂∞‡∂≠‡∑í‡∂∫‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑í‡∂∫. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.")

# --- ADMIN COMMANDS (Admin ‡∂ú‡∑ö ‡∑Ä‡∑í‡∂∞‡∑è‡∂±) ---

async def vip_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω‡∑ì‡∂± ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø /vip ‡∂∏‡∑ô‡∂±‡∑î‡∑Ä ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í."""
    menu_text = (
        "üëë *Admin VIP Menu (Advanced)*\n\n"
        
        "*/vip*\n"
        "‚Ä∫ ‡∂∏‡∑ô‡∂∏ ‡∂∏‡∑ô‡∂±‡∑î‡∑Ä ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í.\n\n"
        
        "*/send*\n"
        "‚Ä∫ ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∂ß reply ‡∂ö‡∂ª ‡∂∏‡∑ô‡∂∫ ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂±. Bot ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑É‡∂±‡∑î ‡∂á‡∂≠.\n"
        "‚Ä∫ **‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∂±‡∑ê‡∂≠‡∑î‡∑Ä:** ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ FORWARD ‡∂ö‡∂ª‡∂∫‡∑í.\n"
        "‚Ä∫ **‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∑É‡∂∏‡∂ú:** ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ COPY ‡∂ö‡∂ª‡∂∫‡∑í.\n\n"

        "*/schedule* `[‡∂ö‡∑è‡∂Ω‡∂∫]`\n"
        "‚Ä∫ `/send` ‡∂∏‡∑ô‡∂±‡∑í, ‡∂±‡∂∏‡∑î‡∂≠‡∑ä ‡∂±‡∑í‡∂∫‡∂∏‡∑í‡∂≠ ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä‡∂ö‡∂ß schedule ‡∂ö‡∂ª‡∂∫‡∑í.\n"
        "‚Ä∫ `[‡∂ö‡∑è‡∂Ω‡∂∫]` = 10m (‡∂∏‡∑í‡∂±‡∑í‡∂≠‡∑ä‡∂≠‡∑î), 2h (‡∂¥‡∑ê‡∂∫), 1d (‡∂Ø‡∑Ä‡∑É‡∑ä).\n\n"

        "*‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∂∫‡∑ú‡∂Ø‡∂± ‡∂Ü‡∂ö‡∑è‡∂ª‡∂∫ (/send & /schedule ‡∑É‡∂≥‡∑Ñ‡∑è):*\n"
        "‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∂ß ‡∂¥‡∑É‡∑î‡∑Ä, *‡∂±‡∑Ä ‡∂¥‡∑ö‡∑Ö‡∑í ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä* ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂±.\n"
                
        "*/stats*\n"
        "‚Ä∫ ‡∂∏‡∑î‡∑Ö‡∑î subscribers ‡∂Ω‡∑è ‡∂ú‡∂´‡∂± ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í.\n\n"
        
        "*/getuser* `[USER_ID]`\n"
        "‚Ä∫ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü subscriber ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑î‡∂ú‡∑ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í.\n\n"
        
        "*/deluser* `[USER_ID]`\n"
        "‚Ä∫ subscriber ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑ä‡∑Ä database ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂∫‡∑í."
    )
    await update.message.reply_text(menu_text, parse_mode=ParseMode.MARKDOWN)

async def send_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/send ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫. ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ (Confirmation) ‡∂â‡∂Ω‡∑ä‡∂Ω‡∂∫‡∑í."""
    
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ö†Ô∏è *‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂± ‡∂Ü‡∂ö‡∑è‡∂ª‡∂∫:*\n‡∂î‡∂∂‡∂ß ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ß Reply ‡∂ö‡∂ª `/send` ‡∂Ω‡∑ô‡∑É ‡∂ß‡∂∫‡∑í‡∂¥‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.")
        return
        
    # ‡∂¥‡∑ê‡∂ª‡∂´‡∑í ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    context.chat_data.clear()

    message_to_send = update.message.reply_to_message
    buttons = parse_buttons(update.message.text) # Multi-line buttons ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    subscriber_count = len(get_subscriber_ids())
    operation = "COPY with buttons" if buttons else "FORWARD" # Smart Send

    # Admin ‡∂ú‡∑ô‡∂±‡∑ä ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ô‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂≠‡∑è‡∑Ä‡∂ö‡∑è‡∂Ω‡∑í‡∂ö‡∑Ä ‡∂∏‡∂≠‡∂ö‡∂∫‡∑ö ‡∂≠‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
    context.chat_data['pending_broadcast'] = {
        "admin_id": update.effective_user.id,
        "from_chat_id": message_to_send.chat_id,
        "message_id": message_to_send.message_id,
        "buttons": buttons,
        "count": subscriber_count,
        "operation": operation
    }

    # Admin ‡∂ú‡∑ô‡∂±‡∑ä ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∂â‡∂Ω‡∑ä‡∂Ω‡∑ì‡∂∏
    await update.message.reply_text(
        f"‚ö†Ô∏è *Broadcast ‡∂ë‡∂ö ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±*\n\n"
        f"‡∂î‡∂∂ ‡∂∏‡∑ô‡∂∏ ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ *{operation.upper()}* ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∑É‡∑ñ‡∂Ø‡∑è‡∂±‡∂∏‡∑ä.\n"
        f"‡∂∏‡∑î‡∑Ö‡∑î ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑í‡∂±‡∑ä ‡∂ú‡∂´‡∂±: *{subscriber_count}*\n\n"
        f"‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß `YES` ‡∂Ω‡∑ô‡∑É‡∂Ø, ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß `NO` ‡∂Ω‡∑ô‡∑É‡∂Ø ‡∂ß‡∂∫‡∑í‡∂¥‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.",
        parse_mode=ParseMode.MARKDOWN
    )

async def schedule_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/schedule ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫. ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ (Confirmation) ‡∂â‡∂Ω‡∑ä‡∂Ω‡∂∫‡∑í."""

    if not update.message.reply_to_message:
        await update.message.reply_text("‚ö†Ô∏è *‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂± ‡∂Ü‡∂ö‡∑è‡∂ª‡∂∫:*\n‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∂ß Reply ‡∂ö‡∂ª `/schedule [‡∂ö‡∑è‡∂Ω‡∂∫]` ‡∂Ω‡∑ô‡∑É ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂± (‡∂ã‡∂Ø‡∑è: `/schedule 2h`).")
        return
    
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è *‡∂ö‡∑è‡∂Ω‡∂∫ ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫‡∂∫‡∑í.*\n‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫: `/schedule 10m` ‡∑Ñ‡∑ù `/schedule 2h` ‡∑Ñ‡∑ù `/schedule 1d`")
        return

    # ‡∂¥‡∑ê‡∂ª‡∂´‡∑í ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    context.chat_data.clear()

    time_str = context.args[0]
    time_in_seconds = parse_time(time_str) # ‡∂ö‡∑è‡∂Ω‡∂∫ ‡∂≠‡∂≠‡∑ä‡∂¥‡∂ª ‡∑Ä‡∂Ω‡∂ß ‡∑Ñ‡∑ê‡∂ª‡∑Ä‡∑ì‡∂∏
    
    if time_in_seconds is None:
        await update.message.reply_text("‚ö†Ô∏è *‡∂ö‡∑è‡∂Ω ‡∂Ü‡∂ö‡∑ò‡∂≠‡∑í‡∂∫ ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∂∫‡∑í.*\n`m` (‡∂∏‡∑í‡∂±‡∑í‡∂≠‡∑ä‡∂≠‡∑î), `h` (‡∂¥‡∑ê‡∂∫), ‡∑Ñ‡∑ù `d` (‡∂Ø‡∑Ä‡∑É‡∑ä) ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.\n‡∂ã‡∂Ø‡∑è‡∑Ñ‡∂ª‡∂´: `/schedule 2h`")
        return

    message_to_send = update.message.reply_to_message
    buttons = parse_buttons(update.message.text)
    subscriber_count = len(get_subscriber_ids())
    operation = "COPY with buttons" if buttons else "FORWARD"

    # Schedule ‡∂ë‡∂ö ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂¥‡∑ô‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂∏‡∂≠‡∂ö‡∂∫‡∑ö ‡∂≠‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
    context.chat_data['pending_schedule'] = {
        "admin_id": update.effective_user.id,
        "from_chat_id": message_to_send.chat_id,
        "message_id": message_to_send.message_id,
        "buttons": buttons,
        "count": subscriber_count,
        "operation": operation,
        "time_str": time_str,
        "time_sec": time_in_seconds
    }

    # Admin ‡∂ú‡∑ô‡∂±‡∑ä ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∂â‡∂Ω‡∑ä‡∂Ω‡∑ì‡∂∏
    await update.message.reply_text(
        f"‚è≥ *Schedule ‡∂ë‡∂ö ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±*\n\n"
        f"‡∂î‡∂∂ ‡∂∏‡∑ô‡∂∏ ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ *{operation.upper()}* ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∑É‡∑ñ‡∂Ø‡∑è‡∂±‡∂∏‡∑ä.\n"
        f"‡∂∏‡∑î‡∑Ö‡∑î ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑í‡∂±‡∑ä ‡∂ú‡∂´‡∂±: *{subscriber_count}*\n"
        f"‡∂∫‡∑Ä‡∂± ‡∂ö‡∑è‡∂Ω‡∂∫: ‡∂≠‡∑Ä *{time_str}* ‡∂ö‡∑í‡∂±‡∑ä.\n\n"
        f"‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß `YES` ‡∂Ω‡∑ô‡∑É‡∂Ø, ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß `NO` ‡∂Ω‡∑ô‡∑É‡∂Ø ‡∂ß‡∂∫‡∑í‡∂¥‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.",
        parse_mode=ParseMode.MARKDOWN
    )


async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Admin ‡∂ú‡∑ö 'YES'/'NO' ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∂ß ‡∂Ö‡∂±‡∑î‡∑Ä ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏."""
    
    text = update.message.text.upper()
    
    # Broadcast ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    if 'pending_broadcast' in context.chat_data:
        if text == 'YES':
            job_data = context.chat_data.pop('pending_broadcast')
            await update.message.reply_text("‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì. Broadcast ‡∂ë‡∂ö ‡∂Ö‡∂ª‡∂π‡∂∏‡∑í‡∂±‡∑ä...")
            
            # Broadcast ‡∂ë‡∂ö background task ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂¥‡∂ß‡∂±‡∑ä ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
            context.application.create_task(do_broadcast(context, job_data))
            
        elif text == 'NO':
            context.chat_data.pop('pending_broadcast')
            await update.message.reply_text("Broadcast ‡∂ë‡∂ö ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì.")
        else:
            await update.message.reply_text("‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ú‡∑Ä‡∑ö. `YES` ‡∑Ñ‡∑ù `NO` ‡∂Ω‡∑ô‡∑É ‡∂ß‡∂∫‡∑í‡∂¥‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.")
        return

    # Schedule ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    if 'pending_schedule' in context.chat_data:
        if text == 'YES':
            job_data = context.chat_data.pop('pending_schedule')
            time_sec = job_data.pop('time_sec') # ‡∂ö‡∑è‡∂Ω‡∂∫
            time_str = job_data.pop('time_str') # ‡∂ö‡∑è‡∂Ω‡∂∫ (text)
            
            # Job ‡∂ë‡∂ö schedule ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
            context.job_queue.run_once(scheduled_broadcast_job, time_sec, data=job_data, name=f"broadcast_{job_data['message_id']}")
            
            await update.message.reply_text(
                f"‚úÖ *‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä Schedule ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì!*\n\n"
                f"Broadcast ‡∂ë‡∂ö ‡∂≠‡∑Ä *{time_str}* ‡∂ö‡∑í‡∂±‡∑ä ‡∂∫‡∑Ä‡∂±‡∑î ‡∂Ω‡∑ê‡∂∂‡∑ö.",
                parse_mode=ParseMode.MARKDOWN
            )
            
        elif text == 'NO':
            context.chat_data.pop('pending_schedule')
            await update.message.reply_text("Schedule ‡∂ë‡∂ö ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì.")
        else:
            await update.message.reply_text("‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ú‡∑Ä‡∑ö. `YES` ‡∑Ñ‡∑ù `NO` ‡∂Ω‡∑ô‡∑É ‡∂ß‡∂∫‡∑í‡∂¥‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.")
        return

    logger.info(f"Admin ‡∂ú‡∑ö ‡∑É‡∑è‡∂∏‡∑è‡∂±‡∑ä‚Äç‡∂∫ ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∑ä ‡∂±‡∑ú‡∑É‡∂Ω‡∂ö‡∑è ‡∑Ñ‡∂ª‡∑í‡∂± ‡∂Ω‡∂Ø‡∑ì: {text}")


async def scheduled_broadcast_job(context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡∂±‡∑í‡∂∫‡∂∏‡∑í‡∂≠ ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä‡∂ß schedule ‡∑Ä‡∑ñ job ‡∂ë‡∂ö run ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏."""
    logger.info(f"Schedule ‡∑Ä‡∑ñ job ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ö‡∂ª‡∂π‡∂∏‡∑í‡∂±‡∑ä: {context.job.name}")
    job_data = context.job.data
    
    # ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± broadcast ‡∑Å‡∑ä‚Äç‡∂ª‡∑í‡∂≠‡∂∫ call ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    await do_broadcast(context, job_data)


# --- Other Admin Commands (‡∂Ö‡∂±‡∑ô‡∂ö‡∑î‡∂≠‡∑ä Admin ‡∑Ä‡∑í‡∂∞‡∑è‡∂±) ---

async def stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/stats - ‡∂ú‡∂´‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä."""
    try:
        count = len(get_subscriber_ids())
        await update.message.reply_text(f"üìä *Bot Statistics*\n‡∂∏‡∑î‡∑Ö‡∑î Subscribers ‡∂Ω‡∑è ‡∂ú‡∂´‡∂±: *{count}*", parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        await update.message.reply_text(f"Stats ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")

async def delete_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/deluser - User ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑ä‡∑Ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏."""
    if not context.args:
        await update.message.reply_text("‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫: `/deluser [USER_ID]`")
        return
    user_id_to_delete = context.args[0]
    if not user_id_to_delete.isdigit():
        await update.message.reply_text("‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ú‡∑Ä‡∂± User ID ‡∂ë‡∂ö‡∂ö‡∑í. ‡∂â‡∂Ω‡∂ö‡∑ä‡∂ö‡∂∏‡∑ä ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂±.")
        return
    try:
        doc_ref = db.collection('subscribers').document(user_id_to_delete)
        if doc_ref.get().exists:
            doc_ref.delete()
            await update.message.reply_text(f"‚úÖ User {user_id_to_delete} ‡∑Ä database ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì.")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è User {user_id_to_delete} ‡∑Ä database ‡∂ë‡∂ö‡∑ö ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.")
    except Exception as e:
        await update.message.reply_text(f"User ‡∑Ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")

async def get_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/getuser - User ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑î‡∂ú‡∑ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂∂‡∑ê‡∂Ω‡∑ì‡∂∏."""
    if not context.args:
        await update.message.reply_text("‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫: `/getuser [USER_ID]`")
        return
    user_id_to_get = context.args[0]
    if not user_id_to_get.isdigit():
        await update.message.reply_text("‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ú‡∑Ä‡∂± User ID ‡∂ë‡∂ö‡∂ö‡∑í. ‡∂â‡∂Ω‡∂ö‡∑ä‡∂ö‡∂∏‡∑ä ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂±.")
        return
    try:
        doc = db.collection('subscribers').document(user_id_to_get).get()
        if doc.exists:
            data = doc.to_dict()
            sub_time = "N/A"
            if 'subscribed_at' in data and isinstance(data['subscribed_at'], datetime):
                sub_time = data['subscribed_at'].strftime("%Y-%m-%d %H:%M:%S")
            username = f"@{data.get('username')}" if data.get('username') else "N/A"
            reply_text = (
                f"üë§ *‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª: `{data.get('user_id')}`*\n\n"
                f"First Name: *{data.get('first_name')}*\n"
                f"Last Name: *{data.get('last_name') or 'N/A'}*\n"
                f"Username: *{username}*\n"
                f"Subscribed On: `{sub_time}`"
            )
            await update.message.reply_text(reply_text, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(f"‚ö†Ô∏è User {user_id_to_get} ‡∑Ä database ‡∂ë‡∂ö‡∑ö ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.")
    except Exception as e:
        await update.message.reply_text(f"User ‡∂ú‡∑ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")


def main() -> None:
    """Bot ‡∂ë‡∂ö ‡∂¥‡∂´‡∂ú‡∑ê‡∂±‡∑ä‡∑Ä‡∑ì‡∂∏."""
    
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN ‡∂ë‡∂ö ‡∑É‡∂ö‡∑É‡∑è ‡∂±‡∑ê‡∂≠! ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª configuration ‡∂ë‡∂ö ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.")
        return

    # JobQueue ‡∂ë‡∂ö ‡∂∫‡∑ú‡∂Ø‡∑è‡∂ú‡∂±‡∑ä‡∂±‡∑ö /schedule ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # Admin ‡∂ß startup notification ‡∂ë‡∂ö ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
    application.post_init = notify_admin_on_startup

    # Admin ‡∂ú‡∑ö ID ‡∂ë‡∂ö filter ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂∫‡∑ú‡∂Ø‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
    admin_filter = filters.User(user_id=ADMIN_USER_ID)

    # --- Handlers (‡∑Ä‡∑í‡∂∞‡∑è‡∂± ‡∂∑‡∑è‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏) ---
    # Public command
    application.add_handler(CommandHandler("start", start_command, filters=filters.ChatType.PRIVATE))
    
    # Admin commands
    application.add_handler(CommandHandler("vip", vip_menu_handler, filters=admin_filter))
    application.add_handler(CommandHandler("send", send_command, filters=admin_filter))
    application.add_handler(CommandHandler("schedule", schedule_command, filters=admin_filter))
    application.add_handler(CommandHandler("stats", stats_handler, filters=admin_filter))
    application.add_handler(CommandHandler("deluser", delete_user_handler, filters=admin_filter))
    application.add_handler(CommandHandler("getuser", get_user_handler, filters=admin_filter))
    
    # Confirmation Handler ('YES'/'NO' ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∑É‡∂≥‡∑Ñ‡∑è)
    # ‡∂∏‡∑ô‡∂∫ ‡∂Ö‡∂±‡∑ô‡∂ö‡∑î‡∂≠‡∑ä command handler ‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∑É‡∑î‡∑Ä ‡∂∫‡∑ô‡∂Ø‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & admin_filter, handle_confirmation))

    logger.info("Bot (Advanced v1.0) ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∑í‡∂∫... polling ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä...")
    application.run_polling()

if __name__ == '__main__':
    main()


