# -*- coding: utf-8 -*-
"""
ADVANCED Telegram Broadcast Bot v3.0 (‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω Comments)
- python-telegram-bot v20+ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´‡∂∫‡∑ô‡∂±‡∑ä‡∂∏ ‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω‡∑ì‡∂± ‡∂ö‡∂ª ‡∂á‡∂≠
- ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∂ö‡∑ö‡∂≠‡∂∫ ‡∂ë‡∂ö‡∂∏ ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä‡∂ö.

--- NEW FEATURES v3.0 (‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä ‡∑Ä‡∑í‡∑Å‡∑ö‡∑Ç‡∑è‡∂Ç‡∂ú) ---
1.  FIXED: Persistent Scheduling (‡∑É‡∑ä‡∂Æ‡∑í‡∂ª Schedule ‡∂¥‡∂Ø‡∑ä‡∂∞‡∂≠‡∑í‡∂∫):
    - Schedule jobs ‡∂Ø‡∑ê‡∂±‡∑ä Bot ‡∂ú‡∑ö ‡∂∏‡∂≠‡∂ö‡∂∫‡∑ö (memory) ‡∑Ä‡∑ô‡∂±‡∑î‡∑Ä‡∂ß Firebase Database ‡∂ë‡∂ö‡∑ö ‡∂ú‡∂∂‡∂©‡∑è ‡∂ö‡∑ô‡∂ª‡∑ö.
    - Server ‡∂ë‡∂ö restart ‡∑Ä‡∑î‡∑Ä‡∂Ø, schedule jobs ‡∂∏‡∑ê‡∂ö‡∑ì ‡∂∫‡∂±‡∑ä‡∂±‡∑ö ‡∂±‡∑ê‡∂≠.
    - Bot ‡∂ë‡∂ö ‡∑É‡∑ë‡∂∏ ‡∂∏‡∑í‡∂±‡∑í‡∂≠‡∑ä‡∂≠‡∑î‡∑Ä‡∂ö‡∂∏ (60s) ‡∑Ä‡∂ª‡∂ö‡∑ä DB ‡∂ë‡∂ö ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª ‡∂±‡∑í‡∂∫‡∂∏‡∑í‡∂≠ jobs ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∂ª‡∂∫‡∑í.
2.  FIXED: /remshed ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∂Ø‡∑ê‡∂±‡∑ä Database ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä jobs ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂∫‡∑í.

--- ADVANCED FEATURES (‡∂¥‡∑ê‡∂ª‡∂´‡∑í ‡∂Ø‡∑í‡∂∫‡∑î‡∂´‡∑î ‡∑Ä‡∑í‡∑Å‡∑ö‡∑Ç‡∑è‡∂Ç‡∂ú) ---
1.  Button Confirmation (‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏)
2.  Multi-Line Buttons (‡∂∂‡∑Ñ‡∑î-‡∂¥‡∑ö‡∑Ö‡∑í ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä)
3.  Smart Send (‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ Forward/Copy)
4.  Broadcast Throttling (‡∑Ä‡∑í‡∂ö‡∑è‡∑Å‡∂± ‡∑Ä‡∑ö‡∂ú‡∂∫ ‡∂¥‡∑è‡∂Ω‡∂±‡∂∫)
5.  Updated /vip Menu & Startup Notification
"""

import logging
import firebase_admin
import asyncio
import re
from firebase_admin import credentials, firestore
from datetime import datetime, timedelta, timezone # Timezone ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ô‡∂±‡∑ä import ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.error import BadRequest, Forbidden
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler
)

# --- START OF CONFIGURATION (‡∑É‡∑ê‡∂ö‡∑É‡∑î‡∂∏‡∑ä) ---
TELEGRAM_BOT_TOKEN = "8419617505:AAFwnP-m7fbhbcUYFKm85xQmz0FLsyupZbE"
ADMIN_USER_ID = 6687619682
TARGET_GROUP_ID = -1003074965096
# --- END OF CONFIGURATION ---

# --- ADVANCED CONFIG (‡∂ã‡∑É‡∑É‡∑ä ‡∑É‡∑ê‡∂ö‡∑É‡∑î‡∂∏‡∑ä) ---
BROADCAST_RATE_LIMIT = 25 # ‡∂≠‡∂≠‡∑ä‡∂¥‡∂ª‡∂∫‡∂ö‡∂ß ‡∂∫‡∑Ä‡∂± ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂© ‡∂ú‡∂´‡∂±
SCHEDULE_CHECK_INTERVAL = 60 # Schedule jobs ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂± ‡∂ö‡∑è‡∂Ω‡∂∫ (‡∂≠‡∂≠‡∑ä‡∂¥‡∂ª 60 = ‡∂∏‡∑í‡∂±‡∑í‡∂≠‡∑ä‡∂≠‡∑î‡∑Ä 1)

# ‡∂Ω‡∑ú‡∂ú‡∑ä ‡∑É‡∑ê‡∂ö‡∑É‡∑ì‡∂∏ (Logging)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# Firebase ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ (Initialize Firebase)
try:
    cred = credentials.Certificate("serviceAccountKey.json")
    firebase_admin.initialize_app(cred)
    db = firestore.client()
    logger.info("Firebase ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑í‡∂∫!")
except Exception as e:
    logger.error(f"Firebase ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")
    exit()

# --- HELPER FUNCTIONS (‡∂ã‡∂¥‡∂ö‡∑è‡∂ª‡∂ö ‡∑Å‡∑ä‚Äç‡∂ª‡∑í‡∂≠) ---

async def check_group_membership(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> dict:
    """‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è group ‡∂ë‡∂ö‡∑ö ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑ô‡∂ö‡∑ä‡∂Ø‡∑ê‡∂∫‡∑í ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂∫‡∑í."""
    try:
        member = await context.bot.get_chat_member(chat_id=TARGET_GROUP_ID, user_id=user_id)
        if member.status in ['member', 'administrator', 'creator', 'restricted']:
            return {"is_member": True, "status": member.status}
        else:
            return {"is_member": False, "status": member.status}
    except (BadRequest, Forbidden) as e:
        logger.error(f"‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂≠‡∑ä‡∑Ä‡∂∫ ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä (ID: {user_id}): {e}")
        return {"is_member": False, "status": "error", "error_message": str(e)}
    except Exception as e:
        logger.error(f"‡∑É‡∑è‡∂∏‡∑è‡∂±‡∑ä‚Äç‡∂∫ ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä (‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂≠‡∑ä‡∑Ä‡∂∫ ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏): {e}")
        return {"is_member": False, "status": "error", "error_message": str(e)}

async def notify_admin_on_startup(app: Application) -> None:
    """Bot ‡∂ë‡∂ö ‡∂î‡∂±‡∑ä ‡∑Ä‡∑ñ ‡∑Ä‡∑í‡∂ß Admin ‡∂ß DM ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∫‡∑Ä‡∂∫‡∑í."""
    try:
        await app.bot.send_message(
            chat_id=ADMIN_USER_ID,
            text=f"ü§ñ *Bot is now ONLINE! (Advanced v3.0 - Persistent Schedule)*\n\n"
                 f"Throttling: *{BROADCAST_RATE_LIMIT} msg/sec*\n"
                 f"Schedule Check: *Every {SCHEDULE_CHECK_INTERVAL} sec*\n"
                 f"Use /vip to see your admin commands.",
            parse_mode=ParseMode.MARKDOWN
        )
        logger.info("Admin ‡∑Ñ‡∂ß startup ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∂∫‡∑Ä‡∂± ‡∂Ω‡∂Ø‡∑ì.")
    except Exception as e:
        logger.error(f"Admin ‡∑Ñ‡∂ß startup ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫: {e}")

def parse_buttons(message_text: str) -> (InlineKeyboardMarkup | None):
    """‡∂∂‡∑Ñ‡∑î-‡∂¥‡∑ö‡∑Ö‡∑í ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä (multi-line buttons) ‡∑É‡∂ö‡∑É‡∂± ‡∑Å‡∑ä‚Äç‡∂ª‡∑í‡∂≠‡∂∫."""
    lines = message_text.split('\n')[1:] # ‡∂¥‡∑Ö‡∂∏‡∑î ‡∂¥‡∑ö‡∑Ö‡∑í‡∂∫ (command ‡∂ë‡∂ö) ‡∂∏‡∂ü ‡∑Ñ‡∑ê‡∂ª‡∑ì‡∂∏
    buttons = []
    if not lines:
        return None # ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∂±‡∑ê‡∂≠

    for line in lines:
        line = line.strip()
        if not line:
            continue
        try:
            button_text, button_url = line.split('|', 1)
            button_text = button_text.strip()
            button_url = button_url.strip()
            if not (button_url.startswith("http://") or button_url.startswith("https://")):
                logger.warning(f"‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ú‡∑Ä‡∂± URL ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∏‡∂ü ‡∑Ñ‡∂ª‡∑í‡∂± ‡∂Ω‡∂Ø‡∑ì: {button_url}")
                continue
            buttons.append([InlineKeyboardButton(text=button_text, url=button_url)])
        except ValueError:
            logger.warning(f"‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ú‡∑Ä‡∂± ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∂Ü‡∂ö‡∑ò‡∂≠‡∑í‡∂∫‡∂ö‡∑ä ‡∂∏‡∂ü ‡∑Ñ‡∂ª‡∑í‡∂± ‡∂Ω‡∂Ø‡∑ì: {line}")
            continue
    
    if buttons:
        return InlineKeyboardMarkup(buttons)
    return None

def parse_time(time_str: str) -> (int | None):
    """Schedule command ‡∂ë‡∂ö‡∑ö ‡∂ö‡∑è‡∂Ω‡∂∫ ‡∂≠‡∂≠‡∑ä‡∂¥‡∂ª ‡∑Ä‡∂Ω‡∂ß ‡∑Ñ‡∂ª‡∑Ä‡∂∫‡∑í (10m, 2h, 1d)."""
    if not time_str:
        return None
    match = re.match(r"^(\d+)([mhd])$", time_str.lower())
    if not match:
        return None
    value = int(match.group(1))
    unit = match.group(2)
    if unit == 'm':
        return value * 60 # ‡∂∏‡∑í‡∂±‡∑í‡∂≠‡∑ä‡∂≠‡∑î
    elif unit == 'h':
        return value * 3600 # ‡∂¥‡∑ê‡∂∫
    elif unit == 'd':
        return value * 86400 # ‡∂Ø‡∑Ä‡∑É‡∑ä
    return None

def get_subscriber_ids() -> list:
    """Database ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ subscriber IDs ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏."""
    try:
        users_ref = db.collection('subscribers').stream()
        return [user.id for user in users_ref]
    except Exception as e:
        logger.error(f"Firestore ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä subscriber IDs ‡∂Ω‡∂∂‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫: {e}")
        return []


async def do_broadcast(context: ContextTypes.DEFAULT_TYPE, job_data: dict) -> None:
    """Broadcast ‡∂ë‡∂ö ‡∑É‡∑í‡∂Ø‡∑î‡∂ö‡∂ª‡∂± ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∑Å‡∑ä‚Äç‡∂ª‡∑í‡∂≠‡∂∫ (Throttling ‡∑É‡∂∏‡∂ú)."""
    
    admin_id = job_data["admin_id"]
    from_chat_id = job_data["from_chat_id"]
    message_id = job_data["message_id"]
    # job_data['buttons'] ‡∂∫‡∂±‡∑î dict ‡∂ë‡∂ö‡∂ö‡∑ä (Firestore ‡∂±‡∑í‡∑É‡∑è). ‡∂ë‡∂∫ ‡∂±‡∑ê‡∑Ä‡∂≠ object ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î‡∂∫‡∑í.
    buttons_dict = job_data.get("buttons")
    buttons_markup = InlineKeyboardMarkup.from_dict(buttons_dict) if buttons_dict else None
    
    operation = "copy" if buttons_markup else "forward" # Smart Send
    
    subscriber_ids = get_subscriber_ids()
    if not subscriber_ids:
        await context.bot.send_message(admin_id, "Database ‡∂ë‡∂ö ‡∑Ñ‡∑í‡∑É‡∑ä‡∂∫. Broadcast ‡∂ë‡∂ö ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì.")
        return

    total_users = len(subscriber_ids)
    success_count = 0
    failure_count = 0
    
    # Admin ‡∂ß broadcast ‡∂ë‡∂ö ‡∂¥‡∂ß‡∂±‡∑ä ‡∂ú‡∂≠‡∑ä ‡∂∂‡∑Ä ‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä ‡∂Ø‡∑ì‡∂∏
    # Schedule ‡∑Ä‡∑ñ job ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∂∏‡∑ä "Broadcast ‡∂ë‡∂ö ‡∂á‡∂ª‡∂π‡∑î‡∂´‡∑è" ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
    if job_data.get("is_scheduled", False):
         await context.bot.send_message(
            admin_id,
            f"‚è≥ *Schedule ‡∑Ä‡∑ñ broadcast ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ö‡∂ª‡∂π‡∂∏‡∑í‡∂±‡∑ä...*\n\n"
            f"‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∑Ä: *{operation.upper()}*\n"
            f"‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑í‡∂±‡∑ä *{total_users}* ‡∂Ø‡∑ô‡∂±‡∑ô‡∂ö‡∑î‡∂ß ‡∂∫‡∑Ä‡∂∏‡∑í‡∂±‡∑ä ‡∑É‡∑í‡∂ß‡∑ì (‡∑Ä‡∑ö‡∂ú‡∂∫: {BROADCAST_RATE_LIMIT} msg/sec).\n\n"
            f"‡∂∏‡∑ô‡∂∫ ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä ‡∑Ä‡∑ñ ‡∂¥‡∑É‡∑î ‡∂î‡∂∂‡∂ß ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä ‡∑Ä‡∑è‡∂ª‡∑ä‡∂≠‡∑è‡∑Ä‡∂ö‡∑ä ‡∂Ω‡∑ê‡∂∂‡∑ô‡∂±‡∑î ‡∂á‡∂≠.",
            parse_mode=ParseMode.MARKDOWN
        )
    
    # Throttled Loop - ‡∑Ä‡∑ö‡∂ú‡∂∫ ‡∂¥‡∑è‡∂Ω‡∂±‡∂∫ ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
    for user_id_str in subscriber_ids:
        try:
            user_id_int = int(user_id_str)
            if operation == "copy":
                await context.bot.copy_message(chat_id=user_id_int, from_chat_id=from_chat_id, message_id=message_id, reply_markup=buttons_markup)
            else: # operation == "forward"
                await context.bot.forward_message(chat_id=user_id_int, from_chat_id=from_chat_id, message_id=message_id)
            success_count += 1
        except (Forbidden, BadRequest) as e:
            failure_count += 1
            if "bot was blocked by the user" in str(e).lower() or "user is deactivated" in str(e).lower():
                logger.info(f"User {user_id_str} ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä bot ‡∑Ä block ‡∂ö‡∂ª ‡∂á‡∂≠. Database ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä...")
                try:
                    db.collection('subscribers').document(user_id_str).delete()
                except Exception as del_e:
                    logger.error(f"User {user_id_str} ‡∑Ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫: {del_e}")
        except Exception as e:
            failure_count += 1
            logger.error(f"{user_id_str} ‡∑Ä‡∑ô‡∂≠ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂±‡∑ú‡∂Ø‡∂±‡∑ä‡∂±‡∑è ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")

        # Throttling - ‡∑Ä‡∑ö‡∂ú‡∂∫ ‡∂¥‡∑è‡∂Ω‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
        await asyncio.sleep(1 / BROADCAST_RATE_LIMIT)

    # Admin ‡∂ß ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä ‡∑Ä‡∑è‡∂ª‡∑ä‡∂≠‡∑è‡∑Ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
    await context.bot.send_message(
        admin_id,
        f"‚úÖ *Broadcast ‡∂ë‡∂ö ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä!*\n\n"
        f"‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂∫‡∑ê‡∑Ä‡∑ñ ‡∂ú‡∂´‡∂±: *{success_count}*\n"
        f"‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö ‡∑Ä‡∑ñ ‡∂ú‡∂´‡∂±: *{failure_count}*\n"
        f"(Block ‡∂ö‡∑Ö/Deactivated ‡∑Ä‡∑ñ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑í‡∂±‡∑ä ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∑Ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì)",
        parse_mode=ParseMode.MARKDOWN
    )

# --- BOT HANDLER FUNCTIONS (‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö ‡∑Ä‡∑í‡∂∞‡∑è‡∂±) ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/start ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∑É‡∑Ñ group ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂≠‡∑ä‡∑Ä‡∂∫ ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏."""
    user = update.effective_user
    chat = update.effective_chat
    
    if chat.type != 'private':
        if str(chat.id) == str(TARGET_GROUP_ID):
            try:
                await update.message.reply_text(f"üëã @{user.username or user.first_name}, ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∂ß /start ‡∂∫‡∂±‡∑ä‡∂± ‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∑í‡∂ö‡∑Ä (DM) ‡∂ë‡∑Ä‡∂±‡∑ä‡∂±!", reply_to_message_id=update.message.message_id)
            except Exception: pass
        return

    logger.info(f"User {user.id} ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä /start ‡∂Ω‡∑ê‡∂∂‡∑î‡∂´‡∑í (DM)")
    membership = await check_group_membership(context, user.id)

    if not membership["is_member"]:
        logger.info(f"User {user.id} group ‡∂ë‡∂ö‡∑ö ‡∂±‡∑ê‡∂≠ (Status: {membership['status']}). ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í‡∂∫ ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂ö‡∑ä‡∑Ç‡∑ö‡∂¥ ‡∑Ä‡∑í‡∂∫.")
        reply_text = (
            "‚õî *‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í‡∂∫ ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í*\n\n"
            "Broadcast ‡∑É‡∑ö‡∑Ä‡∑è‡∑Ä ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß, ‡∂î‡∂∂ ‡∂Ö‡∂¥‡∂ú‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± group ‡∂ë‡∂ö‡∑ö ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂∫‡∑ô‡∂ö‡∑î ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫.\n\n"
            "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª group ‡∂ë‡∂ö‡∂ß join ‡∑Ä‡∑ì, ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂∏‡∑ô‡∑Ñ‡∑í /start ‡∂Ω‡∑ô‡∑É ‡∂ß‡∂∫‡∑í‡∂¥‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±."
        )
        if membership["status"] == "error":
            reply_text = "‚ö†Ô∏è ‡∂î‡∂∂‡∂ú‡∑ö ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂≠‡∑ä‡∑Ä‡∂∫ ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑í‡∂∫. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±."
            await context.bot.send_message(
                chat_id=ADMIN_USER_ID,
                text=f"üÜò *CRITICAL BOT ERROR*\n\nUser `{user.id}` ‡∂ú‡∑ö ‡∑É‡∑è‡∂∏‡∑è‡∂¢‡∑í‡∂ö‡∂≠‡∑ä‡∑Ä‡∂∫ (group: `{TARGET_GROUP_ID}`) ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑Ö ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.\n\n*‡∂Ø‡∑ù‡∑Ç‡∂∫:* `{membership.get('error_message')}`\n\nüëâ **‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂∏‡∑è‡∂ª‡∑ä‡∂ú‡∂∫: Bot ‡∑Ä ‡∂Ö‡∂±‡∑í‡∑Ä‡∑è‡∂ª‡∑ä‡∂∫‡∂∫‡∑ô‡∂±‡∑ä‡∂∏ group ‡∂ë‡∂ö‡∑ö ADMINISTRATOR ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±!**",
                parse_mode=ParseMode.MARKDOWN
            )
        await update.message.reply_text(reply_text, parse_mode=ParseMode.MARKDOWN)
        return

    try:
        logger.info(f"User {user.id} group ‡∂ë‡∂ö‡∑ö ‡∑É‡∑í‡∂ß‡∑ì. (Status: {membership['status']}).")
        user_doc_ref = db.collection('subscribers').document(str(user.id))
        user_doc = user_doc_ref.get()
        if not user_doc.exists:
            user_data = {'user_id': user.id, 'first_name': user.first_name, 'last_name': user.last_name or '', 'username': user.username or '', 'subscribed_at': firestore.SERVER_TIMESTAMP}
            user_doc_ref.set(user_data)
            logger.info(f"‡∂±‡∑Ä ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑ä ({user.id}) Firestore ‡∑Ä‡∑ô‡∂≠ ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì.")
            await context.bot.send_message(chat_id=user.id, text="‚úÖ *‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∑Ä‡∑í‡∂∫!*\n\n‡∂î‡∂∂‡∑Ä ‡∂Ö‡∂¥‡∂ú‡∑ö broadcast ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä‡∂ß ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∂ª‡∂ú‡∂±‡∑ä‡∂±‡∑è ‡∂Ω‡∂Ø‡∑ì.", parse_mode=ParseMode.MARKDOWN)
        else:
            logger.info(f"User {user.id} ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∑Ä‡∑ì ‡∂á‡∂≠.")
            await context.bot.send_message(chat_id=user.id, text="‚ÑπÔ∏è ‡∂î‡∂∂ ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂Ö‡∂¥‡∂ú‡∑ö broadcast ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä‡∑ö ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∑Ä‡∑ì ‡∂á‡∂≠.")
    except Exception as e:
        logger.error(f"/start ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä (User {user.id}): {e}")
        await update.message.reply_text("‚ö†Ô∏è ‡∂¥‡∂Ø‡∑ä‡∂∞‡∂≠‡∑í‡∂∫‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑í‡∂∫. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.")

# --- ADMIN COMMANDS (Admin ‡∂ú‡∑ö ‡∑Ä‡∑í‡∂∞‡∑è‡∂±) ---

async def vip_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """v3.0 - ‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω‡∑ì‡∂± ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø /vip ‡∂∏‡∑ô‡∂±‡∑î‡∑Ä ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í."""
    menu_text = (
        "üëë *Admin VIP Menu (Advanced v3.0)*\n\n"
        
        "*/vip*\n"
        "‚Ä∫ ‡∂∏‡∑ô‡∂∏ ‡∂∏‡∑ô‡∂±‡∑î‡∑Ä ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í.\n\n"
        
        "*/send*\n"
        "‚Ä∫ ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∂ß reply ‡∂ö‡∂ª ‡∂∏‡∑ô‡∂∫ ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂±. Bot ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑É‡∂±‡∑î ‡∂á‡∂≠.\n"
        "‚Ä∫ **‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∂±‡∑ê‡∂≠‡∑î‡∑Ä:** ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ FORWARD ‡∂ö‡∂ª‡∂∫‡∑í.\n"
        "‚Ä∫ **‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∑É‡∂∏‡∂ú:** ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ COPY ‡∂ö‡∂ª‡∂∫‡∑í.\n\n"

        "*/schedule* `[‡∂ö‡∑è‡∂Ω‡∂∫]`\n"
        "‚Ä∫ `/send` ‡∂∏‡∑ô‡∂±‡∑í, ‡∂±‡∂∏‡∑î‡∂≠‡∑ä ‡∂±‡∑í‡∂∫‡∂∏‡∑í‡∂≠ ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä‡∂ö‡∂ß schedule ‡∂ö‡∂ª‡∂∫‡∑í.\n"
        "‚Ä∫ `[‡∂ö‡∑è‡∂Ω‡∂∫]` = 10m, 2h, 1d.\n\n"

        "*‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∂∫‡∑ú‡∂Ø‡∂± ‡∂Ü‡∂ö‡∑è‡∂ª‡∂∫ (/send & /schedule ‡∑É‡∂≥‡∑Ñ‡∑è):*\n"
        "‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∂ß ‡∂¥‡∑É‡∑î‡∑Ä, *‡∂±‡∑Ä ‡∂¥‡∑ö‡∑Ö‡∑í ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä* ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂±.\n"

        "*/stats*\n"
        "‚Ä∫ ‡∂∏‡∑î‡∑Ö‡∑î subscribers ‡∂Ω‡∑è ‡∂ú‡∂´‡∂± ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í.\n\n"
        
        "*/remshed*\n"
        "‚Ä∫ (FIXED!) Schedule ‡∂ö‡∂ª ‡∂á‡∂≠‡∑í *‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏* broadcasts (Database ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä) ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∂ª‡∂∫‡∑í.\n\n"
        
        "*/getuser* `[USER_ID]`\n"
        "‚Ä∫ subscriber ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑î‡∂ú‡∑ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í.\n\n"
        
        "*/deluser* `[USER_ID]`\n"
        "‚Ä∫ subscriber ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑ä‡∑Ä database ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂∫‡∑í."
    )
    await update.message.reply_text(menu_text, parse_mode=ParseMode.MARKDOWN)

async def send_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/send ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫. ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä (Buttons) ‡∂â‡∂Ω‡∑ä‡∂Ω‡∂∫‡∑í."""
    
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ö†Ô∏è *‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂± ‡∂Ü‡∂ö‡∑è‡∂ª‡∂∫:*\n‡∂î‡∂∂‡∂ß ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ß Reply ‡∂ö‡∂ª `/send` ‡∂Ω‡∑ô‡∑É ‡∂ß‡∂∫‡∑í‡∂¥‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.")
        return
        
    context.chat_data.clear() # ‡∂¥‡∑ê‡∂ª‡∂´‡∑í ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    message_to_send = update.message.reply_to_message
    buttons = parse_buttons(update.message.text)
    subscriber_count = len(get_subscriber_ids())
    operation = "COPY with buttons" if buttons else "FORWARD"

    # ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂≠‡∑è‡∑Ä‡∂ö‡∑è‡∂Ω‡∑í‡∂ö‡∑Ä ‡∂∏‡∂≠‡∂ö‡∂∫‡∑ö ‡∂≠‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
    context.chat_data['pending_broadcast'] = {
        "admin_id": update.effective_user.id,
        "from_chat_id": message_to_send.chat_id,
        "message_id": message_to_send.message_id,
        # InlineKeyboardMarkup object ‡∂ë‡∂ö Firestore ‡∂ë‡∂ö‡∂ß ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß dict ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∂‡∑Ä‡∂ß ‡∂¥‡∂≠‡∑ä‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î‡∂∫‡∑í
        "buttons": buttons.to_dict() if buttons else None,
        "count": subscriber_count,
        "operation": operation
    }

    # Admin ‡∂ú‡∑ô‡∂±‡∑ä ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∂â‡∂Ω‡∑ä‡∂Ω‡∑ì‡∂∏ (‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∑É‡∂∏‡∂ú)
    keyboard = [
        [InlineKeyboardButton("‚úÖ YES (‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±)", callback_data="confirm_broadcast_yes")],
        [InlineKeyboardButton("‚ùå NO (‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±)", callback_data="confirm_broadcast_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"‚ö†Ô∏è *Broadcast ‡∂ë‡∂ö ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±*\n\n"
        f"‡∂î‡∂∂ ‡∂∏‡∑ô‡∂∏ ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ *{operation.upper()}* ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∑É‡∑ñ‡∂Ø‡∑è‡∂±‡∂∏‡∑ä.\n"
        f"‡∂∏‡∑î‡∑Ö‡∑î ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑í‡∂±‡∑ä ‡∂ú‡∂´‡∂±: *{subscriber_count}*\n\n"
        f"‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑Ñ‡∂≠ ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∂ö‡∑ä ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

async def schedule_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/schedule ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫. v3.0 - ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä (Buttons) ‡∂â‡∂Ω‡∑ä‡∂Ω‡∂∫‡∑í."""

    if not update.message.reply_to_message:
        await update.message.reply_text("‚ö†Ô∏è *‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂± ‡∂Ü‡∂ö‡∑è‡∂ª‡∂∫:*\n‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∂ß Reply ‡∂ö‡∂ª `/schedule [‡∂ö‡∑è‡∂Ω‡∂∫]` ‡∂Ω‡∑ô‡∑É ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂± (‡∂ã‡∂Ø‡∑è: `/schedule 2h`).")
        return
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è *‡∂ö‡∑è‡∂Ω‡∂∫ ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫‡∂∫‡∑í.*\n‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫: `/schedule 10m` ‡∑Ñ‡∑ù `/schedule 2h` ‡∑Ñ‡∑ù `/schedule 1d`")
        return

    context.chat_data.clear() # ‡∂¥‡∑ê‡∂ª‡∂´‡∑í ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    time_str = context.args[0]
    time_in_seconds = parse_time(time_str)
    
    if time_in_seconds is None:
        await update.message.reply_text("‚ö†Ô∏è *‡∂ö‡∑è‡∂Ω ‡∂Ü‡∂ö‡∑ò‡∂≠‡∑í‡∂∫ ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∂∫‡∑í.*\n`m` (‡∂∏‡∑í‡∂±‡∑í‡∂≠‡∑ä‡∂≠‡∑î), `h` (‡∂¥‡∑ê‡∂∫), ‡∑Ñ‡∑ù `d` (‡∂Ø‡∑Ä‡∑É‡∑ä) ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.\n‡∂ã‡∂Ø‡∑è‡∑Ñ‡∂ª‡∂´: `/schedule 2h`")
        return

    message_to_send = update.message.reply_to_message
    buttons = parse_buttons(update.message.text)
    subscriber_count = len(get_subscriber_ids())
    operation = "COPY with buttons" if buttons else "FORWARD"

    # ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂≠‡∑è‡∑Ä‡∂ö‡∑è‡∂Ω‡∑í‡∂ö‡∑Ä ‡∂∏‡∂≠‡∂ö‡∂∫‡∑ö ‡∂≠‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
    context.chat_data['pending_schedule'] = {
        "admin_id": update.effective_user.id,
        "from_chat_id": message_to_send.chat_id,
        "message_id": message_to_send.message_id,
        "buttons": buttons.to_dict() if buttons else None,
        "count": subscriber_count,
        "operation": operation,
        "time_str": time_str,
        "time_sec": time_in_seconds
    }

    # Admin ‡∂ú‡∑ô‡∂±‡∑ä ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∂â‡∂Ω‡∑ä‡∂Ω‡∑ì‡∂∏ (‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∑É‡∂∏‡∂ú)
    keyboard = [
        [InlineKeyboardButton("‚úÖ YES (Schedule ‡∂ö‡∂ª‡∂±‡∑ä‡∂±)", callback_data="confirm_schedule_yes")],
        [InlineKeyboardButton("‚ùå NO (‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±)", callback_data="confirm_schedule_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"‚è≥ *Schedule ‡∂ë‡∂ö ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±*\n\n"
        f"‡∂î‡∂∂ ‡∂∏‡∑ô‡∂∏ ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ *{operation.upper()}* ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∑É‡∑ñ‡∂Ø‡∑è‡∂±‡∂∏‡∑ä.\n"
        f"‡∂∏‡∑î‡∑Ö‡∑î ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑í‡∂±‡∑ä ‡∂ú‡∂´‡∂±: *{subscriber_count}*\n"
        f"‡∂∫‡∑Ä‡∂± ‡∂ö‡∑è‡∂Ω‡∂∫: ‡∂≠‡∑Ä *{time_str}* ‡∂ö‡∑í‡∂±‡∑ä.\n\n"
        f"‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑Ñ‡∂≠ ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∂ö‡∑ä ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

async def button_confirmation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """v3.0 - 'YES'/'NO' ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä click ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä ‡∑Ñ‡∑É‡∑î‡∂ª‡∑î‡∑Ä‡∂∫‡∑í."""
    
    query = update.callback_query
    await query.answer() # ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏ click ‡∂ö‡∑Ö ‡∂∂‡∑Ä Telegram ‡∑Ä‡∑ô‡∂≠ ‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä ‡∂Ø‡∑ì‡∂∏
    
    data = query.data # "confirm_broadcast_yes" ‡∑Ä‡∑ê‡∂±‡∑í ‡∂Ø‡∂≠‡∑ä‡∂≠
    
    # --- Broadcast ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ---
    if data == "confirm_broadcast_yes":
        job_data = context.chat_data.pop('pending_broadcast', None)
        if job_data is None:
            await query.edit_message_text("‚ö†Ô∏è ‡∂∏‡∑ô‡∂∏ ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∑Ä ‡∂ö‡∂Ω‡∑ä ‡∂â‡∂ö‡∑î‡∂≠‡∑ä ‡∑Ä‡∑ì ‡∂á‡∂≠ (Action Expired) ‡∑Ñ‡∑ù ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª ‡∂á‡∂≠.", reply_markup=None)
            return
        
        await query.edit_message_text("‚úÖ ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì. Broadcast ‡∂ë‡∂ö ‡∂Ö‡∂ª‡∂π‡∂∏‡∑í‡∂±‡∑ä...", reply_markup=None)
        context.application.create_task(do_broadcast(context, job_data))
        
    elif data == "confirm_broadcast_no":
        context.chat_data.pop('pending_broadcast', None)
        await query.edit_message_text("‚ùå Broadcast ‡∂ë‡∂ö ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì.", reply_markup=None)

    # --- Schedule ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ (FIXED v3.0) ---
    elif data == "confirm_schedule_yes":
        job_data = context.chat_data.pop('pending_schedule', None)
        if job_data is None:
            await query.edit_message_text("‚ö†Ô∏è ‡∂∏‡∑ô‡∂∏ ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∑Ä ‡∂ö‡∂Ω‡∑ä ‡∂â‡∂ö‡∑î‡∂≠‡∑ä ‡∑Ä‡∑ì ‡∂á‡∂≠ (Action Expired) ‡∑Ñ‡∑ù ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª ‡∂á‡∂≠.", reply_markup=None)
            return

        time_sec = job_data.pop('time_sec')
        time_str = job_data.pop('time_str')
        
        # ‡∂±‡∑í‡∂∫‡∂∏‡∑í‡∂≠ ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä ‡∂ú‡∂´‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ (UTC ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä‡∑ô‡∂±‡∑ä)
        run_at_time = datetime.now(timezone.utc) + timedelta(seconds=time_sec)
        
        # Job ‡∂ë‡∂ö JobQueue ‡∂ë‡∂ö‡∂ß ‡∂Ø‡∑è‡∂±‡∑Ä‡∑è ‡∑Ä‡∑ô‡∂±‡∑î‡∑Ä‡∂ß, Firestore ‡∂ë‡∂ö‡∂ß ‡∂Ω‡∑í‡∑Ä‡∑ì‡∂∏
        try:
            # Job ‡∂ë‡∂ö‡∂ß ‡∂Ö‡∂∏‡∂≠‡∂ª ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
            job_data["run_at"] = run_at_time
            job_data["is_scheduled"] = True
            job_data["created_at"] = firestore.SERVER_TIMESTAMP
            
            # Firestore 'scheduled_jobs' collection ‡∂ë‡∂ö‡∂ß ‡∂Ω‡∑í‡∑Ä‡∑ì‡∂∏
            doc_ref = db.collection('scheduled_jobs').document()
            doc_ref.set(job_data)
            
            logger.info(f"‡∂±‡∑Ä schedule job ‡∂ë‡∂ö‡∂ö‡∑ä Firestore ‡∑Ä‡∑ô‡∂≠ ‡∂Ω‡∑í‡∂∫‡∂± ‡∂Ω‡∂Ø‡∑ì (ID: {doc_ref.id}) - {time_str} ‡∂ö‡∑í‡∂±‡∑ä ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∑ö.")
            
            await query.edit_message_text(
                f"‚úÖ *‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä Schedule ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì!*\n\n"
                f"Broadcast ‡∂ë‡∂ö ‡∂≠‡∑Ä *{time_str}* ‡∂ö‡∑í‡∂±‡∑ä ‡∂∫‡∑Ä‡∂±‡∑î ‡∂Ω‡∑ê‡∂∂‡∑ö.\n"
                f"(Job ID: `{doc_ref.id}`)",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=None
            )
        except Exception as e:
            logger.error(f"Firestore ‡∑Ä‡∑ô‡∂≠ schedule job ‡∂Ω‡∑í‡∑Ä‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")
            await query.edit_message_text(f"‚ö†Ô∏è Schedule ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑í‡∂∫: {e}", reply_markup=None)
            
    elif data == "confirm_schedule_no":
        context.chat_data.pop('pending_schedule', None)
        await query.edit_message_text("‚ùå Schedule ‡∂ë‡∂ö ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì.", reply_markup=None)

# --- NEW v3.0: Persistent Job Checker ---
async def check_scheduled_jobs(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    ‡∑É‡∑ë‡∂∏ ‡∂∏‡∑í‡∂±‡∑í‡∂≠‡∑ä‡∂≠‡∑î‡∑Ä‡∂ö‡∂ß ‡∑Ä‡∂ª‡∂ö‡∑ä‡∂∏ (SCHEDULE_CHECK_INTERVAL) ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∑ö.
    Firestore ‡∂ë‡∂ö ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª, ‡∂±‡∑í‡∂∫‡∂∏‡∑í‡∂≠ ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä ‡∂¥‡∑ê‡∂∏‡∑í‡∂´‡∑í jobs ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∂ª‡∂∫‡∑í.
    """
    logger.info("[Scheduler] ‡∂±‡∑í‡∂∫‡∂∏‡∑í‡∂≠ jobs ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä...")
    
    try:
        # ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä ‡∂¥‡∑ê‡∂∏‡∑í‡∂´‡∑í (run_at <= now) ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ jobs Firestore ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
        now_utc = datetime.now(timezone.utc)
        jobs_query = db.collection('scheduled_jobs').where('run_at', '<=', now_utc).limit(5) # ‡∂ë‡∂ö‡∑Ä‡∂ª 5‡∂ö‡∑ä ‡∂ú‡∂±‡∑í‡∂∏‡∑î
        
        jobs_to_run = list(jobs_query.stream()) # Query ‡∂ë‡∂ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
        
        if not jobs_to_run:
            logger.info("[Scheduler] ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß jobs ‡∂ö‡∑í‡∑É‡∑í‡∑Ä‡∂ö‡∑ä ‡∂±‡∑ê‡∂≠.")
            return
            
        logger.info(f"[Scheduler] ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß jobs {len(jobs_to_run)} ‡∂ö‡∑ä ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∂±‡∑ä‡∂±‡∑è ‡∂Ω‡∂Ø‡∑ì.")

        for job_doc in jobs_to_run:
            job_data = job_doc.to_dict()
            job_id = job_doc.id
            
            logger.info(f"[Scheduler] Job {job_id} ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä...")
            
            # 1. Job ‡∂ë‡∂ö Database ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ (‡∂Ø‡∑ô‡∂¥‡∑è‡∂ª‡∂ö‡∑ä run ‡∑Ä‡∑ì‡∂∏ ‡∑Ä‡∑ê‡∑Ö‡∑ê‡∂ö‡∑ä‡∑Ä‡∑ì‡∂∏‡∂ß)
            try:
                db.collection('scheduled_jobs').document(job_id).delete()
            except Exception as del_e:
                logger.error(f"[Scheduler] Job {job_id} ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {del_e}. Broadcast ‡∂ë‡∂ö ‡∂∏‡∂ü ‡∑Ñ‡∂ª‡∑í‡∂∏‡∑í‡∂±‡∑ä.")
                continue # ‡∂∏‡∑ô‡∂∏ job ‡∂ë‡∂ö ‡∂∏‡∂ü ‡∑Ñ‡∑ê‡∂ª ‡∂ä‡∑Ö‡∂ü ‡∂ë‡∂ö‡∂ß ‡∂∫‡∂∏‡∑î
            
            # 2. Broadcast ‡∂ë‡∂ö ‡∂Ö‡∂ª‡∂π‡∑ì‡∂∏ (Background task ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É)
            context.application.create_task(do_broadcast(context, job_data))
            
            logger.info(f"[Scheduler] Job {job_id} ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂Ö‡∂ª‡∂π‡∂± ‡∂Ω‡∂Ø‡∑ì.")
            
    except Exception as e:
        logger.error(f"[Scheduler] Jobs ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∂ª‡∑î‡∂´‡∑î ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")


# --- Other Admin Commands (‡∂Ö‡∂±‡∑ô‡∂ö‡∑î‡∂≠‡∑ä Admin ‡∑Ä‡∑í‡∂∞‡∑è‡∂±) ---

async def stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/stats - ‡∂ú‡∂´‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä."""
    try:
        sub_count = len(get_subscriber_ids())
        
        # Firestore ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä schedule ‡∑Ä‡∑ñ jobs ‡∂ú‡∂´‡∂±‡∂Ø ‡∂ú‡∂´‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
        sched_jobs = db.collection('scheduled_jobs').stream()
        sched_count = len(list(sched_jobs))
        
        await update.message.reply_text(
            f"üìä *Bot Statistics*\n\n"
            f"‡∂∏‡∑î‡∑Ö‡∑î Subscribers ‡∂Ω‡∑è ‡∂ú‡∂´‡∂±: *{sub_count}*\n"
            f"Schedule ‡∑Ä‡∑ì ‡∂á‡∂≠‡∑í Jobs ‡∂ú‡∂´‡∂±: *{sched_count}*",
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        await update.message.reply_text(f"Stats ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")

async def cancel_schedule_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """FIXED v3.0 - /remshed - Firestore ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ schedule ‡∑Ä‡∑ñ job ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏."""
    
    logger.info("Admin ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä /remshed ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì...")
    try:
        jobs_ref = db.collection('scheduled_jobs')
        jobs_to_delete = list(jobs_ref.stream())
        count = len(jobs_to_delete)
        
        if count == 0:
            await update.message.reply_text("‚ÑπÔ∏è ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂ö‡∑í‡∑É‡∑í‡∂Ø‡∑î schedule job ‡∂ë‡∂ö‡∂ö‡∑ä (Database ‡∂ë‡∂ö‡∑ö) ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠.")
            return

        # Firestore 'batch delete' ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑É‡∑ñ‡∂Ø‡∑è‡∂±‡∂∏‡∑ä ‡∑Ä‡∑ì‡∂∏ (‡∑Ä‡∑ö‡∂ú‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑ä‚Äç‡∂ª‡∂∏‡∂∫‡∂ö‡∑ä)
        batch = db.batch()
        for job_doc in jobs_to_delete:
            batch.delete(job_doc.reference)
        
        # Batch ‡∂ë‡∂ö commit ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ (‡∑É‡∑í‡∂∫‡∂Ω‡∑ä‡∂Ω ‡∂ë‡∂ö‡∑Ä‡∂ª delete ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏)
        batch.commit()
        
        logger.info(f"Admin ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä schedule jobs {count} ‡∂ö‡∑ä ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì.")
        await update.message.reply_text(f"‚úÖ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í! Schedule ‡∂ö‡∂ª ‡∂≠‡∑í‡∂∂‡∑ñ broadcast jobs *{count}* ‡∂ö‡∑ä Database ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì.")
        
    except Exception as e:
        logger.error(f"/remshed ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")
        await update.message.reply_text(f"‚ö†Ô∏è Jobs ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑í‡∂∫: {e}")


async def delete_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/deluser - User ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑ä‡∑Ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏."""
    if not context.args:
        await update.message.reply_text("‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫: `/deluser [USER_ID]`")
        return
    user_id_to_delete = context.args[0]
    if not user_id_to_delete.isdigit():
        await update.message.reply_text("‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ú‡∑Ä‡∂± User ID ‡∂ë‡∂ö‡∂ö‡∑í. ‡∂â‡∂Ω‡∂ö‡∑ä‡∂ö‡∂∏‡∑ä ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂±.")
        return
    try:
        doc_ref = db.collection('subscribers').document(user_id_to_delete)
        if doc_ref.get().exists:
            doc_ref.delete()
            await update.message.reply_text(f"‚úÖ User {user_id_to_delete} ‡∑Ä database ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì.")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è User {user_id_to_delete} ‡∑Ä database ‡∂ë‡∂ö‡∑ö ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.")
    except Exception as e:
        await update.message.reply_text(f"User ‡∑Ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")

async def get_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/getuser - User ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑î‡∂ú‡∑ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂∂‡∑ê‡∂Ω‡∑ì‡∂∏."""
    if not context.args:
        await update.message.reply_text("‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫: `/getuser [USER_ID]`")
        return
    user_id_to_get = context.args[0]
    if not user_id_to_get.isdigit():
        await update.message.reply_text("‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∑ú‡∑Ä‡∂± User ID ‡∂ë‡∂ö‡∂ö‡∑í. ‡∂â‡∂Ω‡∂ö‡∑ä‡∂ö‡∂∏‡∑ä ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂±.")
        return
    try:
        doc = db.collection('subscribers').document(user_id_to_get).get()
        if doc.exists:
            data = doc.to_dict()
            sub_time_utc = data.get('subscribed_at')
            sub_time_str = "N/A"
            if sub_time_utc and isinstance(sub_time_utc, datetime):
                # UTC ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä, +05:30 (‡∑Å‡∑ä‚Äç‡∂ª‡∑ì ‡∂Ω‡∂Ç‡∂ö‡∑è ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä) ‡∂∂‡∑Ä‡∂ß ‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ (‡∂ã‡∂Ø‡∑è‡∑Ñ‡∂ª‡∂´‡∂∫‡∂ö‡∑ä)
                # ‡∂î‡∂∂‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∂∏‡∑ä ‡∂∏‡∑ô‡∂∫ `sub_time_utc.strftime...` ‡∂Ω‡∑ô‡∑É ‡∂≠‡∂∂‡∑è‡∂ú‡∂≠ ‡∑Ñ‡∑ê‡∂ö
                sri_lanka_tz = timezone(timedelta(hours=5, minutes=30))
                sub_time_local = sub_time_utc.astimezone(sri_lanka_tz)
                sub_time_str = sub_time_local.strftime("%Y-%m-%d %H:%M:%S (%Z)")
            
            username = f"@{data.get('username')}" if data.get('username') else "N/A"
            reply_text = (
                f"üë§ *‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª: `{data.get('user_id')}`*\n\n"
                f"First Name: *{data.get('first_name')}*\n"
                f"Last Name: *{data.get('last_name') or 'N/A'}*\n"
                f"Username: *{username}*\n"
                f"Subscribed On (UTC): `{sub_time_utc.strftime('%Y-%m-%d %H:%M:%S %Z') if sub_time_utc else 'N/A'}`"
            )
            await update.message.reply_text(reply_text, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(f"‚ö†Ô∏è User {user_id_to_get} ‡∑Ä database ‡∂ë‡∂ö‡∑ö ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.")
    except Exception as e:
        logger.error(f"/getuser ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")
        await update.message.reply_text(f"User ‡∂ú‡∑ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")


def main() -> None:
    """Bot ‡∂ë‡∂ö ‡∂¥‡∂´‡∂ú‡∑ê‡∂±‡∑ä‡∑Ä‡∑ì‡∂∏."""
    
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN ‡∂ë‡∂ö ‡∑É‡∂ö‡∑É‡∑è ‡∂±‡∑ê‡∂≠! ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª configuration ‡∂ë‡∂ö ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.")
        return

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.post_init = notify_admin_on_startup
    admin_filter = filters.User(user_id=ADMIN_USER_ID)

    # --- NEW v3.0: Persistent JobQueue Ticker ---
    # Bot ‡∂ë‡∂ö ‡∂¥‡∂´‡∂ú‡∑ê‡∂±‡∑ä‡∑Ä‡∑ñ ‡∑Ä‡∑í‡∂ú‡∑É, 'check_scheduled_jobs' ‡∑Å‡∑ä‚Äç‡∂ª‡∑í‡∂≠‡∂∫ ‡∑É‡∑ë‡∂∏ ‡∂≠‡∂≠‡∑ä‡∂¥‡∂ª 60‡∂ö‡∂ß ‡∑Ä‡∂ª‡∂ö‡∑ä‡∂∏
    # (SCHEDULE_CHECK_INTERVAL) ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∑ì‡∂∏‡∂ß ‡∑É‡∂Ω‡∑É‡∑ä‡∑Ä‡∂∫‡∑í.
    job_queue = application.job_queue
    job_queue.run_repeating(check_scheduled_jobs, interval=SCHEDULE_CHECK_INTERVAL, first=10)
    # 'first=10' ‡∂∫‡∂±‡∑î: Bot ‡∂ë‡∂ö on ‡∑Ä‡∑ì ‡∂≠‡∂≠‡∑ä‡∂¥‡∂ª 10‡∂ö‡∑í‡∂±‡∑ä ‡∂¥‡∑Ö‡∂∏‡∑î ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è‡∑Ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂∫‡∑í.
    
    # --- Handlers v3.0 (‡∑Ä‡∑í‡∂∞‡∑è‡∂± ‡∂∑‡∑è‡∂ª‡∂ú‡∑ê‡∂±‡∑ì‡∂∏) ---
    application.add_handler(CommandHandler("start", start_command, filters=filters.ChatType.PRIVATE))
    application.add_handler(CommandHandler("vip", vip_menu_handler, filters=admin_filter))
    application.add_handler(CommandHandler("send", send_command, filters=admin_filter))
    application.add_handler(CommandHandler("schedule", schedule_command, filters=admin_filter))
    application.add_handler(CommandHandler("stats", stats_handler, filters=admin_filter))
    application.add_handler(CommandHandler("remshed", cancel_schedule_handler, filters=admin_filter))
    application.add_handler(CommandHandler("deluser", delete_user_handler, filters=admin_filter))
    application.add_handler(CommandHandler("getuser", get_user_handler, filters=admin_filter))
    
    # 'YES'/'NO' ‡∂∂‡∑ú‡∂≠‡∑ä‡∂≠‡∂∏‡∑ä ‡∑É‡∂≥‡∑Ñ‡∑è CallbackQueryHandler
    application.add_handler(CallbackQueryHandler(button_confirmation_handler, pattern="^confirm_"))

    logger.info(f"Bot (Advanced v3.0 - Persistent) ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∑í‡∂∫... polling ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä... Schedule check interval: {SCHEDULE_CHECK_INTERVAL}s")
    application.run_polling()

if __name__ == '__main__':
    main()


